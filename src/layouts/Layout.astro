---
import { ViewTransitions } from 'astro:transitions';
interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="pl">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<ViewTransitions />
	</head>
	<body>
		<header class="bg-white shadow-sm" transition:persist>
			<nav class="container mx-auto px-4 py-4">
				<div class="flex items-center justify-between">
					<a href="/" class="text-2xl font-display font-bold text-primary-900">
						ANIMALS
					</a>

					<!-- Mobile menu button -->
					<button 
						id="mobile-menu-button" 
						class="lg:hidden p-2 rounded-lg hover:bg-primary-50 transition-colors"
						aria-label="Menu"
						aria-expanded="false"
					>
						<svg 
							class="w-6 h-6 text-primary-600" 
							fill="none" 
							stroke="currentColor" 
							viewBox="0 0 24 24"
						>
							<path 
								class="mobile-menu-icon block" 
								stroke-linecap="round" 
								stroke-linejoin="round" 
								stroke-width="2" 
								d="M4 6h16M4 12h16M4 18h16"
							/>
							<path 
								class="mobile-menu-close hidden" 
								stroke-linecap="round" 
								stroke-linejoin="round" 
								stroke-width="2" 
								d="M6 18L18 6M6 6l12 12"
							/>
						</svg>
					</button>

					<!-- Desktop menu -->
					<div class="hidden lg:flex items-center gap-8">
						<a href="/" class="text-primary-600 hover:text-primary-900 transition-colors">
							Home
						</a>
						<a href="/produkty" class="text-primary-600 hover:text-primary-900 transition-colors">
							Produkty
						</a>
						<a href="/kwalifikacje" class="text-primary-600 hover:text-primary-900 transition-colors">
							Kwalifikacje
						</a>
						<a href="/porady" class="text-primary-600 hover:text-primary-900 transition-colors">
							Porady
						</a>
						<a href="/kontakt" class="bg-accent-500 text-white px-4 py-2 rounded-full hover:bg-accent-600 transition-colors">
							Kontakt
						</a>
					</div>
				</div>

				<!-- Mobile menu panel -->
				<div 
					id="mobile-menu" 
					class="lg:hidden hidden"
				>
					<div class="py-4 space-y-4">
						<a href="/" class="block px-4 py-2 text-primary-600 hover:text-primary-900 hover:bg-primary-50 rounded-lg transition-colors">
							Home
						</a>
						<a href="/produkty" class="block px-4 py-2 text-primary-600 hover:text-primary-900 hover:bg-primary-50 rounded-lg transition-colors">
							Produkty
						</a>
						<a href="/kwalifikacje" class="block px-4 py-2 text-primary-600 hover:text-primary-900 hover:bg-primary-50 rounded-lg transition-colors">
							Kwalifikacje
						</a>
						<a href="/porady" class="block px-4 py-2 text-primary-600 hover:text-primary-900 hover:bg-primary-50 rounded-lg transition-colors">
							Porady
						</a>
						<a href="/kontakt" class="block px-4 py-2 bg-accent-500 text-white hover:bg-accent-600 rounded-lg transition-colors">
							Kontakt
						</a>
					</div>
				</div>
			</nav>
		</header>

		<main transition:animate="slide">
			<slot />
		</main>

		<footer class="bg-primary-900 pt-20 pb-10" transition:persist>
			<!-- Footer content -->
		</footer>

		<script>
			function handleClickOutside(event: MouseEvent | TouchEvent) {
				const mobileMenu = document.getElementById('mobile-menu');
				const mobileMenuButton = document.getElementById('mobile-menu-button');
				const menuIcon = document.querySelector('.mobile-menu-icon');
				const closeIcon = document.querySelector('.mobile-menu-close');

				if (mobileMenu && mobileMenuButton && menuIcon && closeIcon) {
					const target = event.target as Node;
					if (!mobileMenuButton.contains(target) && !mobileMenu.contains(target)) {
						mobileMenu.classList.add('hidden');
						menuIcon.classList.remove('hidden');
						closeIcon.classList.add('hidden');
						mobileMenuButton.setAttribute('aria-expanded', 'false');
					}
				}
			}

			function setupMobileMenu() {
				const mobileMenuButton = document.getElementById('mobile-menu-button');
				const mobileMenu = document.getElementById('mobile-menu');
				const menuIcon = document.querySelector('.mobile-menu-icon');
				const closeIcon = document.querySelector('.mobile-menu-close');

				if (mobileMenuButton && mobileMenu && menuIcon && closeIcon) {
					// Remove existing event listeners if any
					const oldButton = mobileMenuButton.cloneNode(true);
					mobileMenuButton.parentNode?.replaceChild(oldButton, mobileMenuButton);

					// Reset menu state
					mobileMenu.classList.add('hidden');
					menuIcon.classList.remove('hidden');
						closeIcon.classList.add('hidden');
						oldButton.setAttribute('aria-expanded', 'false');

					// Add click and touch event listeners
					oldButton.addEventListener('click', (event) => {
						event.stopPropagation();
						const isExpanded = oldButton.getAttribute('aria-expanded') === 'true';
						oldButton.setAttribute('aria-expanded', (!isExpanded).toString());
						
						mobileMenu.classList.toggle('hidden');
						menuIcon.classList.toggle('hidden');
						closeIcon.classList.toggle('hidden');
					});

					// Close menu when clicking on links
					mobileMenu.querySelectorAll('a').forEach(link => {
						link.addEventListener('click', () => {
							mobileMenu.classList.add('hidden');
							menuIcon.classList.remove('hidden');
							closeIcon.classList.add('hidden');
							oldButton.setAttribute('aria-expanded', 'false');
						});
					});
				}

				// Remove existing click outside listener
				document.removeEventListener('click', handleClickOutside);
				document.removeEventListener('touchstart', handleClickOutside);

				// Add new click outside listeners
				document.addEventListener('click', handleClickOutside);
				document.addEventListener('touchstart', handleClickOutside);
			}

			// Setup mobile menu on initial load
			setupMobileMenu();

			// Re-setup mobile menu after view transitions
			document.addEventListener('astro:page-load', setupMobileMenu);
			document.addEventListener('astro:after-swap', setupMobileMenu);

			// Handle window resize
			window.addEventListener('resize', () => {
				if (window.innerWidth >= 1024) {
					const mobileMenu = document.getElementById('mobile-menu');
					const menuIcon = document.querySelector('.mobile-menu-icon');
					const closeIcon = document.querySelector('.mobile-menu-close');
					const mobileMenuButton = document.getElementById('mobile-menu-button');

					if (mobileMenu && menuIcon && closeIcon && mobileMenuButton) {
						mobileMenu.classList.add('hidden');
						menuIcon.classList.remove('hidden');
						closeIcon.classList.add('hidden');
						mobileMenuButton.setAttribute('aria-expanded', 'false');
					}
				}
			});
		</script>
	</body>
</html>

<style>
	/* Add any additional styles here */
</style>